@page "/courses"
@rendermode InteractiveServer

@using Classify.Model
@using Classify.Components.Layout.Courses

@inject CourseService CourseService
@inject UserService UserService

<PageTitle>Courses</PageTitle>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info" role="alert">@statusMessage</div>
}

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (isCourseServiceDown)
{
    <div class="alert alert-danger" role="alert">
        Service is currently unavailable. Please try again later.
    </div>
    <button class="btn btn-primary" @onclick="RefreshDataAsync">Try Again</button>
}
else
{
    @if (user.Role == "Teacher")
    {
        <div class="my-2">
            <h4>Add New Course</h4>
            <CourseForm NewCourse="newCourse" AddCourse="AddCourse" IsProcessing="isProcessing" />
        </div>
    }

    <div class="my-2">
        @if (user.Role == "Student")
        {
            <h4>Enrolled Courses</h4>
            var enrolledCourses = courses.Where(c => c.isEnrolled(user.Id)).ToList();
            if (enrolledCourses.Count == 0)
            {
                <p>You are not enrolled in any courses.</p>
            }
            <div class="row">
                @foreach (var course in enrolledCourses)
                {
                    <CourseCard Course="course" UserId="user.Id" />
                }
            </div>
        }
        else
        {
            <h4>My Courses</h4>
            var instructorCourses = courses.Where(c => c.InstructorId == user.Id).ToList();
            if (instructorCourses.Count == 0)
            {
                <p>You have no courses.</p>
            }
            <div class="row">
                @foreach (var course in instructorCourses)
                {
                    <CourseCard Course="course" UserId="user.Id" />
                }
            </div>
        }
        <div>
            <h4>All Courses</h4>
            @if (courses.Count == 0)
            {
                <p>No courses available.</p>
            }
            <div class="row">
                @foreach (var course in courses)
                {
                    <CourseCard Course="course" 
                                UserId="user.Id" 
                                ShowEnrollButton="@(user.Role == "Student")" 
                                EnrollStudent="() => EnrollStudent(course.Id, course.Code)" 
                                IsProcessing="isProcessing" />
                }
            </div>
        </div>
    </div>
}

@code {
    private User user = null;
    private List<Course> courses = null;
    private Course newCourse = new Course();
    private string statusMessage = "";
    private bool isProcessing = false;
    private bool isLoading = true;
    private bool isCourseServiceDown = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDataAsync();
        }
    }

    private async Task LoadDataAsync()
    {
        try
        {
            user = await UserService.GetUserAsync();
			courses = await CourseService.GetAllCourses();
        }
        catch (Exception ex)
        {
            isCourseServiceDown = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task EnrollStudent(int courseId, string courseCode)
    {
        try
        {
            isProcessing = true;
            statusMessage = $"Enrolling {courseCode}...";

            var courseRequest = new EnrollStudentRequest
                {
                    CourseId = courseId,
                    StudentId = user.Id,
                    CourseCode = courseCode
                };

            var courseResponse = await CourseService.EnrollStudent(courseRequest);
            if (courseResponse.IsSuccessStatusCode)
            {
                statusMessage = $"Successfully enrolled student in course {courseCode}";
                courses = await CourseService.GetAllCourses();
                StateHasChanged();
            }
            else
            {
                statusMessage = $"Failed to enroll student: {await courseResponse.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Failed to enroll student: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
			StateHasChanged();
        }
    }

    private async Task AddCourse()
    {
        try
        {
            isProcessing = true;
            statusMessage = $"Adding course {newCourse.Code}...";
            newCourse.InstructorId = user.Id;
            var response = await CourseService.AddCourse(newCourse);
            if (response.IsSuccessStatusCode)
            {
                statusMessage = $"Successfully added course {newCourse.Code}";
                courses = await CourseService.GetAllCourses();
                newCourse = new Course();
            }
            else
            {
                statusMessage = $"Failed to add course: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Failed to add course: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task RefreshDataAsync()
    {
        isLoading = true;
        await LoadDataAsync();
    }
}
