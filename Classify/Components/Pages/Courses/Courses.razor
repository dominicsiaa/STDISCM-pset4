@page "/courses"
@rendermode InteractiveServer
@inject CourseService CourseService
@inject JWTStateProvider JWTStateProvider
@using Classify.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@if (!isStudent)
{
    <h4>Add New Course</h4>
    <EditForm Model="newCourse" OnValidSubmit="AddCourse">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="code" class="form-label">Course Code</label>
            <InputText id="code" class="form-control" @bind-Value="newCourse.Code" />
        </div>
        <div class="mb-3">
            <label for="units" class="form-label">Units</label>
            <InputNumber id="units" class="form-control" @bind-Value="newCourse.Units" />
        </div>
        <div class="mb-3">
            <label for="capacity" class="form-label">Capacity</label>
            <InputNumber id="capacity" class="form-control" @bind-Value="newCourse.Capacity" />
        </div>
        <button type="submit" class="btn btn-primary" disabled="@isProcessing">
            @if (isProcessing)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Adding...</span>
            }
            else
            {
                <span>Add Course</span>
            }
        </button>
    </EditForm>
}

<h3>Courses</h3>

@if (courses == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-info" role="alert">
            @statusMessage
        </div>
    }

    <div class="row">
        @foreach (var course in courses)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@course.Code</h5>
                        <h6 class="card-subtitle">Instructor ID: @course.InstructorId</h6>
                        <p class="card-text">
                            Units: @course.Units
                        </p>
                        <p class="card-text fw-bold">
                            Students: @course.StudentIds.Count/@course.Capacity
                        </p>
                        @if (@course.StudentIds.Count < @course.Capacity && !@course.isEnrolled(userId) && isStudent)
                        {
                            <button class="btn btn-primary" @onclick="() => EnrollStudent(course.Id)" disabled="@isProcessing">
                                @if (isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span>Enrolling...</span>
                                }
                                else
                                {
                                    <span>Enroll</span>
                                }
                            </button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private int userId;
    private List<Course> courses = [];
    private bool isStudent;
    private Course newCourse = new Course();
    private string statusMessage = "";
    private bool isProcessing = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            courses = await CourseService.GetAllCourses();
            await GetUserDetails();
            StateHasChanged();
        }
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     courses = await CourseService.GetAllCourses();
    //     await GetUserDetails();
    // }

    private async Task GetUserDetails()
    {
        var authState = await JWTStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
            if (userIdClaim != null)
            {
                userId = int.Parse(userIdClaim.Value);
            }

            var roleClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
            if (roleClaim != null)
            {
                isStudent = roleClaim.Value == "Student";
            }
        }
    }

    private async Task EnrollStudent(int courseId)
    {
        isProcessing = true;
        statusMessage = $"Enrolling {courses.Find(c => c.Id == courseId).Code}...";

        var request = new EnrollStudentRequest
            {
                CourseId = courseId,
                StudentId = userId
            };

        try
        {
            var response = await CourseService.EnrollStudent(request);
            if (response.IsSuccessStatusCode)
            {
                statusMessage = $"Successfully enrolled student in course {courseId}";
                courses = await CourseService.GetAllCourses();
                StateHasChanged();
            }
            else
            {
                statusMessage = "Failed to enroll student.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Failed to enroll student: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task AddCourse()
    {
        isProcessing = true;
        statusMessage = $"Adding course {newCourse.Code}...";

        try
        {
            var response = await CourseService.AddCourse(newCourse);
            if (response.IsSuccessStatusCode)
            {
                statusMessage = $"Successfully added course {newCourse.Code}";
                courses = await CourseService.GetAllCourses();
                newCourse = new Course();
                StateHasChanged();
            }
            else
            {
                statusMessage = "Failed to add course.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Failed to add course: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }
}