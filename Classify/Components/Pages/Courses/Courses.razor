@page "/courses"
@rendermode InteractiveServer
@inject CourseService CourseService
@inject JWTStateProvider JWTStateProvider
@inject ILogger<Courses> _logger;
@using Classify.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info" role="alert">
        @statusMessage
    </div>
}

@if (!isStudent)
{
    <div class="my-2">
        <h4>Add New Course</h4>
        <EditForm Model="newCourse" OnValidSubmit="AddCourse">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="code" class="form-label">Course Code</label>
                <InputText id="code" class="form-control" @bind-Value="newCourse.Code" />
            </div>
            <div class="mb-3">
                <label for="units" class="form-label">Units</label>
                <InputNumber id="units" class="form-control" @bind-Value="newCourse.Units" />
            </div>
            <div class="mb-3">
                <label for="capacity" class="form-label">Capacity</label>
                <InputNumber id="capacity" class="form-control" @bind-Value="newCourse.Capacity" />
            </div>
            <button type="submit" class="btn btn-primary mb-3" disabled="@isProcessing">
                @if (isProcessing)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Adding...</span>
                }
                else
                {
                    <span>Add Course</span>
                }
            </button>
        </EditForm>
    </div>
}

<div class="my-2">
    @if (courses == null)
    {
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        @if (isStudent)
        {
            <h4>Enrolled Courses</h4>
            <div class="row">
                @foreach (var course in courses.Where(c => c.isEnrolled(userId)))
                {
                    <div class="col-md-4 mb-3">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">@course.Code</h5>
                                <h6 class="card-subtitle">Instructor ID: @course.InstructorId</h6>
                                <p class="card-text">
                                    Units: @course.Units
                                </p>
                                <p class="card-text fw-bold">
                                    Students: @course.StudentIds.Count/@course.Capacity
                                </p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <h4>My Courses</h4>
            <div class="row">
                @foreach (var course in courses.Where(c => c.InstructorId == userId))
                {
                    <div class="col-md-4 mb-3">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">@course.Code</h5>
                                <p class="card-text">
                                    Units: @course.Units
                                </p>
                                <p class="card-text fw-bold">
                                    Students: @course.StudentIds.Count/@course.Capacity
                                </p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        <div>
            <h4>All Courses</h4>
            <div class="row">
                @foreach (var course in courses)
                {
                    <div class="col-md-4 mb-3">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">@course.Code</h5>
                                <h6 class="card-subtitle">Instructor ID: @course.InstructorId</h6>
                                <p class="card-text">
                                    Units: @course.Units
                                </p>
                                <p class="card-text fw-bold">
                                    Students: @course.StudentIds.Count/@course.Capacity
                                </p>
                                @if (@course.StudentIds.Count < @course.Capacity && !@course.isEnrolled(userId) && isStudent)
                                {
                                    <button class="btn btn-primary" @onclick="() => EnrollStudent(course.Id)" disabled="@isProcessing">
                                        @if (isProcessing)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            <span>Enrolling...</span>
                                        }
                                        else
                                        {
                                            <span>Enroll</span>
                                        }
                                    </button>
                                }
                                @if (@course.isEnrolled(userId) && isStudent)
                                {
                                    <button class="btn btn-success" disabled>
                                        <span>Enrolled</span>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private int userId;
    private string username;
    private List<Course> courses = null;
    private bool isStudent = true;
    private Course newCourse = new Course();
    private string statusMessage = "";
    private bool isProcessing = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDataAsync();
        }
    }

    private async Task LoadDataAsync()
    {
        var userDetailsTask = GetUserDetails();
        var coursesTask = CourseService.GetAllCourses();

        await Task.WhenAll(userDetailsTask, coursesTask);

        courses = await coursesTask;
        StateHasChanged();
    }

    private async Task GetUserDetails()
    {
        var authState = await JWTStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
            if (userIdClaim != null)
            {
                userId = int.Parse(userIdClaim.Value);
            }

            var usernameClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name);
            if (usernameClaim != null)
            {
                username = usernameClaim.Value;
            }

            var roleClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
            if (roleClaim != null)
            {
                isStudent = roleClaim.Value == "Student";
            }
        }
    }

    private async Task EnrollStudent(int courseId)
    {
        isProcessing = true;
        string enrolledCourseCode = courses.Find(c => c.Id == courseId).Code;
        statusMessage = $"Enrolling {enrolledCourseCode}...";

        var courseRequest = new EnrollStudentRequest
            {
                CourseId = courseId,
                StudentId = userId
            };

        var studentRequest = new EnrollCourseRequest
            {
                Username = username,
                CourseCode = enrolledCourseCode
            };

        try
        {
            var studentResponse = await CourseService.AddCourseToStudent(studentRequest);
            if (studentResponse.IsSuccessStatusCode)
            {
                var courseResponse = await CourseService.EnrollStudent(courseRequest);
                if (courseResponse.IsSuccessStatusCode)
                {
                    statusMessage = $"Successfully enrolled student in course {enrolledCourseCode}";
                    courses = await CourseService.GetAllCourses();
                    StateHasChanged();
                }
                else
                {
                    statusMessage = $"Failed to enroll student: {await courseResponse.Content.ReadAsStringAsync()}";
                }
            }
            else
            {
                statusMessage = $"Failed to enroll student: {await studentResponse.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Failed to enroll student: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task AddCourse()
    {
        isProcessing = true;
        statusMessage = $"Adding course {newCourse.Code}...";
        newCourse.InstructorId = userId;

        try
        {
            var response = await CourseService.AddCourse(newCourse);
            if (response.IsSuccessStatusCode)
            {
                statusMessage = $"Successfully added course {newCourse.Code}";
                courses = await CourseService.GetAllCourses();
                newCourse = new Course();
                StateHasChanged();
            }
            else
            {
                statusMessage = $"Failed to add course: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Failed to add course: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }
}
