@page "/rate-prof"
@rendermode InteractiveServer
@inject RateProfService RateProfService
@inject UserService UserService
@inject ILogger<RateProf> _logger;
@using Classify.Services
@using Classify.Model

<PageTitle>Rate an Instructor</PageTitle>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info" role="alert">@statusMessage</div>
}

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (isRateProfServiceDown)
{
	<div class="alert alert-danger" role="alert">
		Service is currently unavailable. Please try again later.
	</div>
	<button class="btn btn-primary" @onclick="RefreshDataAsync">Try Again</button>
}
else
{
    @if (myRatings.Count > 0)
    {
        <div class="mb-4">
            <h4>My Rating History</h4>
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Professor</th>
                        <th>Score</th>
                        <th>Comment</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var r in myRatings)
                    {
                        <tr>
                            <td>@r.InstructorUsername</td>
                            <td>@r.Score</td>
                            <td>@r.Comment</td>
                            <td>@r.SubmittedAt.ToLocalTime().ToString("MMM dd, yyyy HH:mm")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <h4>Rate a Professor</h4>
    <EditForm OnValidSubmit="HandleSubmit" Model="rating">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Select a Professor</label>
            <InputSelect class="form-select" @bind-Value="selectedProfId">
                <option value="">-- Choose Professor --</option>
                @foreach (var prof in professors)
                {
                    <option value="@prof.Id">@prof.Username</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Rating (1–5)</label>
            <InputNumber class="form-control" @bind-Value="rating.Score" />
        </div>

        <div class="mb-3">
            <label class="form-label">Comment (optional)</label>
            <InputTextArea class="form-control" @bind-Value="rating.Comment" />
        </div>

        @if (!HasAlreadyRated(selectedProfId))
        {
            <button type="submit" class="btn btn-primary">Submit Rating</button>
        }
        else
        {
            <div class="alert alert-warning mt-3">
                You have already rated this professor.
            </div>
        }

    </EditForm>
}

@code {
    private User user = null;
    private List<User> professors = null;
    private List<RateProf> myRatings = new();

    private string statusMessage = "";
    private int selectedProfId;
    private RateProf rating = new();

    private bool isLoading = true;
    private bool isRateProfServiceDown = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDataAsync();
        }
    }

    private async Task LoadDataAsync()
    {
        try
        {
            user = await UserService.GetUserAsync();
            professors = await RateProfService.GetAllProfessors();
            myRatings = await RateProfService.GetMyRatings(user.Id);
        }
        catch (Exception ex)
        {
            isRateProfServiceDown = true;
        }
		finally
		{
			isLoading = false;
			StateHasChanged();
		}
	}

    private async Task HandleSubmit()
    {
        try
        {
			statusMessage = $"Submitting rating...";

            var selectedProf = professors.FirstOrDefault(p => p.Id == selectedProfId);
            if (selectedProf == null)
            {
                statusMessage = "Please select a professor.";
                return;
            }

            rating.StudentId = user.Id;
            rating.StudentUsername = user.Username;
            rating.InstructorId = selectedProf.Id;
            rating.InstructorUsername = selectedProf.Username;
            rating.CourseCode = "N/A";
            rating.CourseTitle = "N/A";

            var response = await RateProfService.SubmitRating(rating);
            if (response.IsSuccessStatusCode)
            {
                statusMessage = $"Successfully submitted rating for {selectedProf.Username}.";
                rating = new RateProf(); // Reset form
                selectedProfId = 0;
                myRatings = await RateProfService.GetMyRatings(user.Id); // Refresh rating history
            }
            else
            {
                statusMessage = "Failed to submit rating.";
            }
        }
		catch
		{
			statusMessage = "Service is currently unavailable. Please try again later.";
		}
        finally
		{
			StateHasChanged();
		}
    }

    private bool HasAlreadyRated(int profId)
    {
        return myRatings.Any(r => r.InstructorId == profId);
    }

	private async Task RefreshDataAsync()
	{
		isLoading = true;
		await LoadDataAsync();
	}
}
