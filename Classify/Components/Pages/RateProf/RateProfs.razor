@page "/rate-prof"
@rendermode InteractiveServer
@inject RateProfService RateProfService
@inject UserService UserService
@inject ILogger<RateProf> _logger;
@using Classify.Services
@using Classify.Model

<PageTitle>Rate an Instructor</PageTitle>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info" role="alert">@statusMessage</div>
}

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (isRateProfServiceDown)
{
    <div class="alert alert-danger" role="alert">
        Service is currently unavailable. Please try again later.
    </div>
    <button class="btn btn-primary" @onclick="RefreshDataAsync">Try Again</button>
}
else
{
    <div class="my-2">
        <h4>All Ratings by Professor</h4>
        <div class="my-4">
            @foreach (var prof in professors)
            {
                var ratings = profRatingsMap.ContainsKey(prof.Id) ? profRatingsMap[prof.Id] : new List<RateProf>();
                var avg = ratings.Any() ? ratings.Average(r => r.Score) : 0;

                <div class="mb-2 border p-3 rounded shadow-sm">
                    <h5 class="mb-2">@prof.Username</h5>
                    <p class="text-muted mb-3">Average Rating: <strong>@avg.ToString("0.0") ★</strong></p>

                    @if (ratings.Count > 0)
                    {
                        <div class="row">
                            @foreach (var rating in ratings)
                            {
                                <div class="col-md-6 mb-2">
                                    <div class="card">
                                        <div class="card-body">
                                            <h6 class="card-title">@rating.Score ★</h6>
                                            <p class="card-text">@rating.Comment</p>
                                            <p class="card-text text-muted small">
                                                by @rating.StudentUsername on @rating.SubmittedAt.ToLocalTime().ToString("MMM dd, yyyy")
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No ratings yet.</p>
                    }
                </div>
            }
        </div>



        @if (myRatings.Count > 0)
        {
            <div class="mb-4">
                <h4>My Rating History</h4>
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Professor</th>
                            <th>Score</th>
                            <th>Comment</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var r in myRatings)
                        {
                            <tr>
                                <td>@r.InstructorUsername</td>
                                <td>@r.Score</td>
                                <td>@r.Comment</td>
                                <td>@r.SubmittedAt.ToLocalTime().ToString("MMM dd, yyyy HH:mm")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        <h4>Rate a Professor</h4>
        <EditForm  EditContext="editContext" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleInvalid" @key="editFormKey" >
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Select a Professor</label>
                <InputSelect class="form-select" @bind-Value="formModel.SelectedProfId">
                    <option value="0">-- Choose Professor --</option>
                    @foreach (var prof in professors)
                    {
                        <option value="@prof.Id">@prof.Username</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => formModel.SelectedProfId)" />
            </div>

            <div class="my-2">
                <label class="form-label">Rating (1–5)</label>
                <InputNumber class="form-control" @bind-Value="formModel.Rating.Score" />
                <ValidationMessage For="@(() => formModel.Rating.Score)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Comment (optional)</label>
                <InputTextArea class="form-control" @bind-Value="formModel.Rating.Comment" style="resize: none;" />
                <ValidationMessage For="@(() => formModel.Rating.Comment)" />
            </div>
            @if (formModel.SelectedProfId > 0)
            {
                if (!HasAlreadyRated(formModel.SelectedProfId))
                {
                    <button type="submit" class="btn btn-primary">
                        Submit Rating
                    </button>
                }
                else
                {
                    <div class="alert alert-warning mt-3">
                        You have already rated this professor.
                    </div>
                }
            }

        </EditForm>
    </div>
}



@code {
    @using System.ComponentModel.DataAnnotations

    public class RateProfWrapper
    {
        [Required(ErrorMessage = "Please select a professor.")]
        public int SelectedProfId { get; set; }

        public RateProf Rating { get; set; } = new();
    }

    private User user = null;
    private List<User> professors = null;
    private List<RateProf> myRatings = new();
    private string statusMessage = "";
    private RateProf rating = new();
    private RateProfWrapper formModel = new();
    private bool isLoading = true;
    private bool isRateProfServiceDown = false;
    private Dictionary<int, List<RateProf>> profRatingsMap = new();
    private EditContext editContext;
    private string editFormKey = Guid.NewGuid().ToString();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDataAsync();
        }
    }

    private async Task LoadDataAsync()
    {
        try
        {
            user = await UserService.GetUserAsync();
            professors = await RateProfService.GetAllProfessors();
            myRatings = await RateProfService.GetMyRatings(user.Id);
            foreach (var prof in professors)
            {
                var ratings = await RateProfService.GetRatingsByProfessor(prof.Id);
                profRatingsMap[prof.Id] = ratings;
            }
            isRateProfServiceDown = false;
        }
        catch (Exception ex)
        {
            isRateProfServiceDown = true;
        }
		finally
		{
			isLoading = false;
			StateHasChanged();
		}
	}

    private async Task HandleSubmit()
    {
        try
        {
            statusMessage = "Submitting rating...";

            var selectedProf = professors.FirstOrDefault(p => p.Id == formModel.SelectedProfId);
            if (selectedProf == null) return;

            var rating = formModel.Rating;
            rating.StudentId = user.Id;
            rating.StudentUsername = user.Username;
            rating.InstructorId = selectedProf.Id;
            rating.InstructorUsername = selectedProf.Username;
            rating.CourseCode = "N/A";
            rating.CourseTitle = "N/A";

            var response = await RateProfService.SubmitRating(rating);
            if (response.IsSuccessStatusCode)
            {
                statusMessage = $"Successfully submitted rating for {selectedProf.Username}.";

                formModel = new RateProfWrapper
                    {
                        SelectedProfId = 0,
                        Rating = new RateProf { Score = 1 }
                    };
                editContext = new EditContext(formModel);
                editContext.MarkAsUnmodified();



                myRatings = await RateProfService.GetMyRatings(user.Id);
                profRatingsMap[selectedProf.Id] = await RateProfService.GetRatingsByProfessor(selectedProf.Id);
            }
            else
            {
                statusMessage = "Failed to submit rating.";
            }
        }
        catch
        {
            statusMessage = "Service is currently unavailable. Please try again later.";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void HandleInvalid()
    {
        statusMessage = "Please correct the validation errors.";
    }

    private bool HasAlreadyRated(int profId)
    {
        return myRatings.Any(r => r.InstructorId == profId);
    }

	private async Task RefreshDataAsync()
	{
		isLoading = true;
		await LoadDataAsync();
	}



    protected override void OnInitialized()
    {
        formModel = new RateProfWrapper
            {
                SelectedProfId = 0,
                Rating = new RateProf { Score = 1 }
            };

        editContext = new EditContext(formModel);
    }

}
