@using Classify.Components.Layout
@using System.ComponentModel.DataAnnotations

@rendermode InteractiveServer

@page "/login"
@layout AuthLayout
@attribute [AllowAnonymous]

@inject NavigationManager navigationManager
@inject ILogger<Login> Logger
@inject AuthenticationService authenticationService

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h3 class="text-center mb-4">Login</h3>

                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p>Logging in...</p>
                        </div>
                    }
                    else
                    {
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        @if (isServiceDown)
                        {
                            <div class="alert alert-warning">The service is currently down. Please try again later.</div>
                        }

                        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <label for="username" class="form-label">Username:</label>
                                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                                <ValidationMessage For="@(() => loginModel.Username)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="password" class="form-label">Password:</label>
                                <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
                                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                            </div>

                            <button type="submit" class="btn btn-primary w-100">Login</button>
                        </EditForm>

                        <p class="text-center">
                            Don't have an account? <a href="/signup">Sign up here</a>.
                        </p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;
    private bool isLoading = false;
    private bool isServiceDown = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;
        isServiceDown = false;

        try
        {
            Logger.LogInformation($"Attempting to log in as: {loginModel.Username}");
            var response = await authenticationService.Login(loginModel.Username, loginModel.Password);
            if (response)
            {
                Logger.LogInformation("Login successful, navigating to home.");
                navigationManager.NavigateTo("/");
            }
            else
            {
                Logger.LogWarning("Login failed, incorrect credentials.");
                errorMessage = "Invalid username or password. Please try again.";
            }
        }
        catch (HttpRequestException ex)
        {
			errorMessage = "Service is currently unavailable. Please try again later.";
            isServiceDown = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred during login.");
            errorMessage = "An unexpected error occurred. Please try again later.";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        [Display(Name = "Username")]
        [StringLength(50, ErrorMessage = "Username cannot be longer than 50 characters.")]
        [MinLength(2, ErrorMessage = "Username must be at least 2 characters long.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        [StringLength(50, ErrorMessage = "Password cannot be longer than 50 characters.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string Password { get; set; } = string.Empty;
    }
}
