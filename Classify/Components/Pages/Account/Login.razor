@using Classify.Components.Layout
@using System.ComponentModel.DataAnnotations

@page "/login"
@layout AuthLayout
@attribute [AllowAnonymous]

@inject NavigationManager navigationManager;
@inject ILogger<Login> Logger
@inject HttpClient HttpClient;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IJSRuntime JSRuntime;

<h3>Login</h3>

<EditForm method="post" Model="loginModel" OnValidSubmit="HandleLogin" FormName="login">
    <DataAnnotationsValidator />

    <div>
        <label for="username">Username:</label>
        <InputText id="username" @bind-Value="loginModel.Username" />
    </div>

    <div>
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="loginModel.Password" type="password" />
    </div>

    <div>
        <button type="submit">Login</button>
    </div>

    <ValidationSummary />
</EditForm>

@code {
    [SupplyParameterFromForm]
    public LoginModel loginModel { get; set; } = new();

    private async Task HandleLogin(EditContext editContext)
    {
        Logger.LogInformation($"Attempting to log in as: {loginModel.Username}");

        var loginRequest = new
        {
            Username = loginModel.Username,
            Password = loginModel.Password
        };
        var response = await HttpClient.PostAsJsonAsync("https://localhost:7030/api/login", loginRequest);

        if (response.IsSuccessStatusCode)
        {
            var jwtToken = await response.Content.ReadAsStringAsync();
            await JSRuntime.InvokeVoidAsync("document.cookie", $"authToken={jwtToken}; path=/; secure; HttpOnly");

            await AuthenticationStateProvider.GetAuthenticationStateAsync();

            Logger.LogInformation($"Successfully logged in as: {loginModel.Username}");
            navigationManager.NavigateTo("/");
        }
        else
        {
            Logger.LogWarning($"Login failed for user: {loginModel.Username}");
            // Handle failed login (show error message to user)
        }

        navigationManager.NavigateTo("/");
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        [Display(Name = "Username")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;
    }
}
