@using Classify.Components.Layout
@using System.ComponentModel.DataAnnotations

@rendermode InteractiveServer

@page "/signup"
@layout AuthLayout
@attribute [AllowAnonymous]

@inject NavigationManager navigationManager
@inject ILogger<SignUp> Logger
@inject AuthenticationService authenticationService

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h3 class="text-center mb-4">Sign Up</h3>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }

                    <EditForm Model="signupModel" OnValidSubmit="HandleSignup">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="username" class="form-label">Username:</label>
                            <InputText id="username" class="form-control" @bind-Value="signupModel.Username" />
                            <ValidationMessage For="@(() => signupModel.Username)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password:</label>
                            <InputText id="password" class="form-control" type="password" @bind-Value="signupModel.Password" />
                            <ValidationMessage For="@(() => signupModel.Password)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Role:</label>
                            <InputRadioGroup @bind-Value="signupModel.Role" class="d-flex gap-3">
                                <InputRadio Value="Role.Student" /> Student
                                <InputRadio Value="Role.Teacher" /> Teacher
                            </InputRadioGroup>
                            <ValidationMessage For="@(() => signupModel.Role)" class="text-danger" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100">Sign Up</button>
                    </EditForm>

                    <p class="text-center">
                        Already have an account? <a href="/login">Log in here</a>.
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private SignupModel signupModel = new();
    private string? errorMessage;

    private async Task HandleSignup()
    {
        Logger.LogInformation($"Signing up as: {signupModel.Username}, Role: {signupModel.Role}");

        var response = await authenticationService.SignUp(signupModel.Username, signupModel.Password, signupModel.Role.ToString());
        if (response)
        {
            Logger.LogInformation("Signup successful, navigating to login.");
            navigationManager.NavigateTo("/login");
        }
        else
        {
            Logger.LogWarning("Signup failed.");
            errorMessage = "Signup failed. Please try again.";
        }
    }

    public class SignupModel
    {
        [Required(ErrorMessage = "Username is required")]
        [Display(Name = "Username")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Role is required")]
        public Role Role { get; set; } = Role.Student;
    }

    public enum Role
    {
        Student,
        Teacher
    }
}
