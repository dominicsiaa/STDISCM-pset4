@page "/grades"
@rendermode InteractiveServer

@using Classify.Model

@inject GradeService GradeService
@inject CourseService CourseService
@inject UserService UserService

<PageTitle>Grades</PageTitle>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info" role="alert">@statusMessage</div>
}

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (isGradesServiceDown)
{
    <div class="alert alert-danger" role="alert">
        Service is currently unavailable. Please try again later.
    </div>
    <button class="btn btn-primary" @onclick="RefreshDataAsync">Try Again</button>
}
else
{
    <div class="my-2">
        @if (user.Role == "Student") 
        {
            <h4>My Grades</h4>
        }
        else
        {
			<h4>Grades of Students</h4>
        }
        <table class="table">
            <thead>
                <tr>
                    <th>Course Code</th>
                    @if (user.Role != "Student")
                    {
                        <th>Student ID</th>
                    }
                    else
                    {
                        <th> Units </th>
                    }
                    <th>Grade</th>
                    @if (user.Role != "Student")
                    {
                        <th>Action</th>
                    }
                </tr>
            </thead>
            <tbody>
                @if (user.Role != "Student")
                {
                    foreach (var course in courses)
                    {
                        var courseGrades = GetGradesForCourse(course.Code);
                        foreach (var studentId in course.StudentIds)
                        {
                            var grade = courseGrades?.FirstOrDefault(g => g.StudentId == studentId);
                            <tr>
                                <td>@course.Code</td>
                                <td>@studentId</td>
                                <td>
                                    @if (grade == null)
                                    {
                                        <span>NGS</span>
                                    }
                                    else if (grade.Gpa == 0.0)
                                    {
                                        <span style="color: red;">0.0</span>
                                    }
                                    else
                                    {
                                        <span>@string.Format("{0:F1}", grade.Gpa)</span>
                                    }
                                </td>
                                <td>
                                    @if (grade == null)
                                    {
                                        <EditForm Model="newGPA" OnValidSubmit="async () => await SubmitGrade(studentId, course.Code, course.Units)">
                                            <DataAnnotationsValidator />
                                            <div class="d-flex align-items-center">
                                                <InputSelect @bind-Value="newGPA"
                                                             class="form-select form-select-sm me-2"
                                                             style="width: 100px">
                                                    <option value="0.0">0.0</option>
                                                    <option value="1.0">1.0</option>
                                                    <option value="2.0">2.0</option>
                                                    <option value="2.5">2.5</option>
                                                    <option value="3.0">3.0</option>
                                                    <option value="3.5">3.5</option>
                                                    <option value="4.0">4.0</option>
                                                </InputSelect>
                                                <button type="submit" class="btn btn-primary btn-sm">Submit</button>
                                            </div>
                                        </EditForm>
                                    }
                                    else
                                    {
                                        <span>Grade Submitted</span>
                                    }
                                </td>
                            </tr>
                        }
                    }
                }
                else
                {
                    foreach (var grade in grades)
                    {
                        <tr>
                            <td>@grade.CourseCode</td>
                            <td>@grade.Units</td>
                            <td>
                                @if (grade.Gpa == 0.0)
                                {
                                    <span style="color: red;">0.0</span>
                                }
                                else
                                {
                                    <span>@string.Format("{0:F1}", grade.Gpa)</span>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        @if (user.Role == "Student")
        {
            <p>CGPA: @string.Format("{0:F3}", CalculateCgpa(grades))</p>
        }
    </div>
}

@code {
    private User user = null;
    private List<Course> courses = null;
    private List<Grade> grades = null;
    private string newGPA = "0.0";
    private string statusMessage = "";
    private bool isGradesServiceDown = false;
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDataAsync();
        }
    }

    private async Task LoadDataAsync()
    {
        try
        {
			user = await UserService.GetUserAsync();

            if (user.Role == "Student")
            {
                grades = await GradeService.GetGradesOfStudent(user.Id);
            }
			else if (user.Role == "Teacher")
            {
                courses = await CourseService.GetAllCourses();
                courses = courses.Where(c => c.InstructorId == user.Id).ToList();
                grades = await GradeService.GetStudentGrades(user.Id);
            }
        }
        catch
        {
            isGradesServiceDown = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private double CalculateCgpa(List<Grade> grades)
    {
        if (grades == null || grades.Count == 0) return 0.0;

        double totalWeightedGpa = 0.0;
        int totalUnits = 0;

        foreach (var grade in grades)
        {
            totalWeightedGpa += grade.Units * grade.Gpa;
            totalUnits += grade.Units;
        }

        return totalUnits > 0 ? totalWeightedGpa / totalUnits : 0.0;
    }

    private List<Grade> GetGradesForCourse(string courseCode)
    {
        return grades.Where(g => g.CourseCode == courseCode).ToList();
    }

    private async Task SubmitGrade(int studentId, string courseCode, int units)
    {
        try
        {
            statusMessage = $"Grading student {studentId} in {courseCode}...";

            Grade newGrade = new Grade
                {
                    StudentId = studentId,
                    InstructorId = user.Id,
                    CourseCode = courseCode,
                    Units = units,
                    Gpa = double.Parse(newGPA)
                };

            var response = await GradeService.AddGrade(newGrade);
            if (response.IsSuccessStatusCode)
            {
                statusMessage = $"Grade {newGPA} submitted for student {studentId} in {courseCode}.";
                newGPA = "0.0"; // Reset the new GPA after submission
                await LoadDataAsync(); // Reload data to reflect changes
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                statusMessage = $"Error submitting grade: {errorMessage}";
            }
        }
        catch
        {
            statusMessage = "Server is currently unavailable. Please try again later.";
        }
		finally
		{
			StateHasChanged();
		}
    }

    private async Task RefreshDataAsync()
    {
        isLoading = true;
        await LoadDataAsync();
    }
}