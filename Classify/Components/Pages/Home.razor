@page "/"
@rendermode InteractiveServer

@inject UserService UserService

<PageTitle>Home</PageTitle>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
    <button class="btn btn-primary" @onclick="RetryLoadData">Retry</button>
}
@if (user == null || isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <div class="mt-4">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h2 class="mb-0">Welcome, @user.Username!</h2>
                    </div>
                    <div class="card-body">
                        <p class="card-text"><strong>ID:</strong> @user.Id</p>
                        <p class="card-text"><strong>Role:</strong> @user.Role</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private User user = null;
    private bool isLoading = true;
    public string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserDataAsync();
    }

    private async Task LoadUserDataAsync()
    {
        try
        {
            user = await UserService.GetUserAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred while loading user data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RetryLoadData()
    {
        isLoading = true;
        await LoadUserDataAsync();
    }
}
